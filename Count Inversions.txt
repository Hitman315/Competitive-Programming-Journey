class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[],long long temp[],long long low,long long mid,long long high){
       
        int i=low;
        int j=mid;
        int k=low;
        long long count=0;
        while(i<mid && j<=high){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
                
            }else{
                temp[k++]=arr[j++];
                count+=(mid-i);
                
            }
        }
        for(;i<mid;i++)
        temp[k++]=arr[i];
        for(;j<=high;j++)
        temp[k++]=arr[j];
        
        for(int i=low;i<=high;i++){
            arr[i]=temp[i];
        }
        return count;
    }
    
    long long int mergeSort(long long arr[],long long temp[],long long low,long long high){
        long long int count=0;
        if(low<high){
            int mid=(low+high)/2;
            count=mergeSort(arr,temp,low,mid);
            count+=mergeSort(arr,temp,mid+1,high);
            count+=merge(arr,temp,low,mid+1,high);
        }
        return count;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long temp[N];
       return mergeSort(arr,temp,0,N-1);
        
    }

};